---
title: Format overflow in digital filtering
subtitle: Lab 12, SDP
format:
  html: default
  pdf: default
  ipynb: default

toc: true
number-depth: 2
number-sections: true

jupyter: python3
execute:
  freeze: true
  eval: false
---

\newcommand*{\underuparrow}[1]{\ensuremath{\underset{\uparrow}{#1}}}

## Objective

Students should observe the effects of internal format overflow and underflow
events on the output of a digital filter.

## Theoretical notions

## Theoretical exercises

1. Consider the following system:
	$$H(z) = \frac{1-\frac{1}{2}z^{-1}}{\left(1 - \frac{1}{4}z^{-1}\right)\left(1 + \frac{1}{4}z^{-1}\right)}$$

    a. Draw one of the series implementations of the system
	b. Assume a fixed-point implementation with $b$ bits for the fractionary part.
	Each product is quantized by rounding to this format.
	Find the variance of the rounding noise due to the
	internal multiplications, at the output of the system.

## Practical exercises

1. In Matlab, use the `fdatool` tool to design a low-pass IIR filter
of order 4, Butterworth type, with cutoff frequency equal to 1.5kHz for
a sampling frequency of 44.1kHz.

   a. Export the filter to Simulink, in the Second-Order-Sections structure ("Export to Simulink model", check option *Build model using basic elements*).
   b. Convert the filter to Direct Form II and export it again to Simulink (also check *Build model using basic elements*).

2. In the Simulink model, make two copies of the filter in Direct-Form II (Copy/Paste).

   At the input of both filters put a sample audio signal (e.g. *Kalimba.mp3*).
   For the block "From Multimedia File", set the parameter "Samples per audio channel" (1024) **to 1**.

   Display the signal types: right-click in white area -> "Other Displays" -> "Signal and Ports" -> "Port Data Types"
   
   a. For the second filter, convert the input signal to fixed-point 1S6I9F data type, using a "Data Type Conversion" block.
   b. Increase the number of bits for the integer part, until obtaining an output signal close to the original;
   c. Obtain and plot the difference between the two outputs;
   d. Export the difference signal to Matlab's Workspace and compute its average value and the variance.

      Use a "To Workspace" block, and change settings: 
	  - Save format: Array
	  - 2D instead of 3D

3. Repeat exercise 2 for the filter implemented with Second-Order-Systems.

3. Repeat exercise 2, returning to the format 1S6I9F.
   
   For the second filter, uncheck for all the *Sum* and *Gain* blocks the option *Saturate on integer overflow*.

   a. What is the effect? Obtain and plot the difference between the two outputs;
   b. In which case are the errors smaller? (with option checked or not).

4. Use the function `normescal()` to compute different scaling norms
for the given filter. Scale the input signal with each one of these norms,
and rescale back the output. What is the effect of this procedure?

## Final questions

1. TBD
